---
# Source: retail-store-sample-catalog-chart/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: catalog
  labels:
    helm.sh/chart: catalog-1.2.2
    app.kubernetes.io/name: catalog
    app.kubernetes.io/instance: catalog
    app.kubernetes.io/component: service
    app.kubernetes.io/owner: retail-store-sample
    app.kubernetes.io/managed-by: Helm
---
# Source: retail-store-sample-catalog-chart/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: catalog-db
data:
  RETAIL_CATALOG_PERSISTENCE_USER: "Y2F0YWxvZw=="
  RETAIL_CATALOG_PERSISTENCE_PASSWORD: "Z2pFY2lqQUQ3T1NEbkhmOA=="
---
# Source: retail-store-sample-catalog-chart/templates/configmap.yml
apiVersion: v1
kind: ConfigMap
metadata:
  name: catalog
data:
  RETAIL_CATALOG_PERSISTENCE_PROVIDER: mysql
  RETAIL_CATALOG_PERSISTENCE_ENDPOINT: catalog-mysql:3306
  RETAIL_CATALOG_PERSISTENCE_DB_NAME: catalog
---
# Source: retail-store-sample-catalog-chart/templates/mysql-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: catalog-mysql
  labels:
    helm.sh/chart: catalog-1.2.2
    app.kubernetes.io/name: catalog
    app.kubernetes.io/instance: catalog
    app.kubernetes.io/component: mysql
    app.kubernetes.io/owner: retail-store-sample
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 3306
      targetPort: mysql
      protocol: TCP
      name: mysql
  selector:
    app.kubernetes.io/name: catalog
    app.kubernetes.io/instance: catalog
    app.kubernetes.io/component: mysql
    app.kubernetes.io/owner: retail-store-sample
---
# Source: retail-store-sample-catalog-chart/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: catalog
  labels:
    helm.sh/chart: catalog-1.2.2
    app.kubernetes.io/name: catalog
    app.kubernetes.io/instance: catalog
    app.kubernetes.io/component: service
    app.kubernetes.io/owner: retail-store-sample
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: catalog
    app.kubernetes.io/instance: catalog
    app.kubernetes.io/component: service
    app.kubernetes.io/owner: retail-store-sample
---
# Source: retail-store-sample-catalog-chart/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: catalog
  labels:
    helm.sh/chart: catalog-1.2.2
    app.kubernetes.io/name: catalog
    app.kubernetes.io/instance: catalog
    app.kubernetes.io/component: service
    app.kubernetes.io/owner: retail-store-sample
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: catalog
      app.kubernetes.io/instance: catalog
      app.kubernetes.io/component: service
      app.kubernetes.io/owner: retail-store-sample
  template:
    metadata:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "8081"
        prometheus.io/scrape: "true"
      labels:
        app.kubernetes.io/name: catalog
        app.kubernetes.io/instance: catalog
        app.kubernetes.io/component: service
        app.kubernetes.io/owner: retail-store-sample
    spec:
      serviceAccountName: catalog
      securityContext:
        fsGroup: 1000
      containers:
        - name: catalog
          envFrom:
            - configMapRef:
                name: catalog
            - secretRef:
                name: catalog-db
          securityContext:
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
          image: "public.ecr.aws/aws-containers/retail-store-sample-catalog:1.2.2"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8081
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /health
              port: 8081
          resources:
            limits:
              memory: 256Mi
            requests:
              cpu: 256m
              memory: 256Mi
          volumeMounts:
            - mountPath: /tmp
              name: tmp-volume
      volumes:
        - name: tmp-volume
          emptyDir:
            medium: Memory
---
# Source: retail-store-sample-catalog-chart/templates/mysql-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: catalog-mysql
  labels:
    helm.sh/chart: catalog-1.2.2
    app.kubernetes.io/name: catalog
    app.kubernetes.io/instance: catalog
    app.kubernetes.io/component: mysql
    app.kubernetes.io/owner: retail-store-sample
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  serviceName: catalog-mysql
  selector:
    matchLabels:
      app.kubernetes.io/name: catalog
      app.kubernetes.io/instance: catalog
      app.kubernetes.io/component: mysql
      app.kubernetes.io/owner: retail-store-sample
  template:
    metadata:
      labels:
        app.kubernetes.io/name: catalog
        app.kubernetes.io/instance: catalog
        app.kubernetes.io/component: mysql
        app.kubernetes.io/owner: retail-store-sample
    spec:
      containers:
        - name: mysql
          image: "public.ecr.aws/docker/library/mysql:8.0"
          imagePullPolicy: IfNotPresent
          env:
            - name: MYSQL_ROOT_PASSWORD
              value: my-secret-pw
            - name: MYSQL_DATABASE
              value: catalog
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  name: catalog-db
                  key: RETAIL_CATALOG_PERSISTENCE_USER
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: catalog-db
                  key: RETAIL_CATALOG_PERSISTENCE_PASSWORD
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql
          ports:
            - name: mysql
              containerPort: 3306
              protocol: TCP
      volumes:
      - name: data
        emptyDir: {}

---
# Source: retail-store-sample-cart-chart/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: carts
  labels:
    helm.sh/chart: carts-1.2.2
    app.kubernetes.io/name: carts
    app.kubernetes.io/instance: carts
    app.kubernetes.io/component: service
    app.kubernetes.io/owner: retail-store-sample
    app.kubernetes.io/managed-by: Helm
---
# Source: retail-store-sample-cart-chart/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: carts
data:
  RETAIL_CART_PERSISTENCE_PROVIDER: dynamodb
  RETAIL_CART_PERSISTENCE_DYNAMODB_TABLE_NAME: Items
  RETAIL_CART_PERSISTENCE_DYNAMODB_CREATE_TABLE: "true"
  AWS_ACCESS_KEY_ID: key
  AWS_SECRET_ACCESS_KEY: secret
  RETAIL_CART_PERSISTENCE_DYNAMODB_ENDPOINT: http://carts-dynamodb:8000
---
# Source: retail-store-sample-cart-chart/templates/dynamodb-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: carts-dynamodb
  labels:
    helm.sh/chart: carts-1.2.2
    app.kubernetes.io/name: carts
    app.kubernetes.io/instance: carts
    app.kubernetes.io/component: dynamodb
    app.kubernetes.io/owner: retail-store-sample
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8000
      targetPort: dynamodb
      protocol: TCP
      name: dynamodb
  selector:
    app.kubernetes.io/name: carts
    app.kubernetes.io/instance: carts
    app.kubernetes.io/component: dynamodb
    app.kubernetes.io/owner: retail-store-sample
---
# Source: retail-store-sample-cart-chart/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: carts
  labels:
    helm.sh/chart: carts-1.2.2
    app.kubernetes.io/name: carts
    app.kubernetes.io/instance: carts
    app.kubernetes.io/component: service
    app.kubernetes.io/owner: retail-store-sample
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: carts
    app.kubernetes.io/instance: carts
    app.kubernetes.io/component: service
    app.kubernetes.io/owner: retail-store-sample
---
# Source: retail-store-sample-cart-chart/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: carts
  labels:
    helm.sh/chart: carts-1.2.2
    app.kubernetes.io/name: carts
    app.kubernetes.io/instance: carts
    app.kubernetes.io/component: service
    app.kubernetes.io/owner: retail-store-sample
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: carts
      app.kubernetes.io/instance: carts
      app.kubernetes.io/component: service
      app.kubernetes.io/owner: retail-store-sample
  template:
    metadata:
      annotations:
        prometheus.io/path: /actuator/prometheus
        prometheus.io/port: "8081"
        prometheus.io/scrape: "true"
      labels:
        app.kubernetes.io/name: carts
        app.kubernetes.io/instance: carts
        app.kubernetes.io/component: service
        app.kubernetes.io/owner: retail-store-sample
    spec:
      serviceAccountName: carts
      securityContext:
        fsGroup: 1000
      containers:
        - name: carts
          env:
            - name: JAVA_OPTS
              value: -XX:MaxRAMPercentage=75.0 -Djava.security.egd=file:/dev/urandom
          envFrom:
            - configMapRef:
                name: carts
          securityContext:
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
          image: "public.ecr.aws/aws-containers/retail-store-sample-cart:1.2.2"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8081
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: 8081
            initialDelaySeconds: 10
          resources:
            limits:
              memory: 512Mi
            requests:
              cpu: 256m
              memory: 512Mi
          volumeMounts:
            - mountPath: /tmp
              name: tmp-volume
      volumes:
        - name: tmp-volume
          emptyDir:
            medium: Memory
---
# Source: retail-store-sample-cart-chart/templates/dynamodb-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: carts-dynamodb
  labels:
    helm.sh/chart: carts-1.2.2
    app.kubernetes.io/name: carts
    app.kubernetes.io/instance: carts
    app.kubernetes.io/component: dynamodb
    app.kubernetes.io/owner: retail-store-sample
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: carts
      app.kubernetes.io/instance: carts
      app.kubernetes.io/component: dynamodb
      app.kubernetes.io/owner: retail-store-sample
  template:
    metadata:
      labels:
        app.kubernetes.io/name: carts
        app.kubernetes.io/instance: carts
        app.kubernetes.io/component: dynamodb
        app.kubernetes.io/owner: retail-store-sample
    spec:
      containers:
        - name: dynamodb
          image: "public.ecr.aws/aws-dynamodb-local/aws-dynamodb-local:1.25.1"
          imagePullPolicy: IfNotPresent
          ports:
            - name: dynamodb
              containerPort: 8000
              protocol: TCP

---
# Source: retail-store-sample-orders-chart/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: orders
  labels:
    helm.sh/chart: orders-1.2.2
    app.kubernetes.io/name: orders
    app.kubernetes.io/instance: orders
    app.kubernetes.io/component: service
    app.kubernetes.io/owner: retail-store-sample
    app.kubernetes.io/managed-by: Helm
---
# Source: retail-store-sample-orders-chart/templates/rabbitmq-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: orders-rabbitmq
data:
---
# Source: retail-store-sample-orders-chart/templates/secret-db.yaml
apiVersion: v1
kind: Secret
metadata:
  name: orders-db
data:
  RETAIL_ORDERS_PERSISTENCE_USERNAME: "b3JkZXJz"
  RETAIL_ORDERS_PERSISTENCE_PASSWORD: "YlZ1cks3WnUzaWJBU3VMSg=="
---
# Source: retail-store-sample-orders-chart/templates/configmap.yml
apiVersion: v1
kind: ConfigMap
metadata:
  name: orders
data:
  RETAIL_ORDERS_MESSAGING_PROVIDER: rabbitmq
  RETAIL_ORDERS_MESSAGING_RABBITMQ_ADDRESSES: orders-rabbitmq:5672
  RETAIL_ORDERS_PERSISTENCE_PROVIDER: postgres
  RETAIL_ORDERS_PERSISTENCE_ENDPOINT: orders-postgresql:5432
  RETAIL_ORDERS_PERSISTENCE_NAME: orders
---
# Source: retail-store-sample-orders-chart/templates/postgresql-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: orders-postgresql
  labels:
    helm.sh/chart: orders-1.2.2
    app.kubernetes.io/name: orders
    app.kubernetes.io/instance: orders
    app.kubernetes.io/component: postgresql
    app.kubernetes.io/owner: retail-store-sample
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 5432
      targetPort: postgresql
      protocol: TCP
      name: postgresql
  selector:
    app.kubernetes.io/name: orders
    app.kubernetes.io/instance: orders
    app.kubernetes.io/component: postgresql
    app.kubernetes.io/owner: retail-store-sample
---
# Source: retail-store-sample-orders-chart/templates/rabbitmq-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: orders-rabbitmq
  labels:
    helm.sh/chart: orders-1.2.2
    app.kubernetes.io/name: orders
    app.kubernetes.io/instance: orders
    app.kubernetes.io/component: rabbitmq
    app.kubernetes.io/owner: retail-store-sample
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 5672
      targetPort: amqp
      protocol: TCP
      name: amqp
    - port: 15672
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: orders
    app.kubernetes.io/instance: orders
    app.kubernetes.io/component: rabbitmq
    app.kubernetes.io/owner: retail-store-sample
---
# Source: retail-store-sample-orders-chart/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: orders
  labels:
    helm.sh/chart: orders-1.2.2
    app.kubernetes.io/name: orders
    app.kubernetes.io/instance: orders
    app.kubernetes.io/component: service
    app.kubernetes.io/owner: retail-store-sample
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: orders
    app.kubernetes.io/instance: orders
    app.kubernetes.io/component: service
    app.kubernetes.io/owner: retail-store-sample
---
# Source: retail-store-sample-orders-chart/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: orders
  labels:
    helm.sh/chart: orders-1.2.2
    app.kubernetes.io/name: orders
    app.kubernetes.io/instance: orders
    app.kubernetes.io/component: service
    app.kubernetes.io/owner: retail-store-sample
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: orders
      app.kubernetes.io/instance: orders
      app.kubernetes.io/component: service
      app.kubernetes.io/owner: retail-store-sample
  template:
    metadata:
      annotations:
        prometheus.io/path: /actuator/prometheus
        prometheus.io/port: "8081"
        prometheus.io/scrape: "true"
      labels:
        app.kubernetes.io/name: orders
        app.kubernetes.io/instance: orders
        app.kubernetes.io/component: service
        app.kubernetes.io/owner: retail-store-sample
    spec:
      serviceAccountName: orders
      securityContext:
        fsGroup: 1000
      containers:
        - name: orders
          env:
            - name: JAVA_OPTS
              value: -XX:MaxRAMPercentage=75.0 -Djava.security.egd=file:/dev/urandom
          envFrom:
            - secretRef:
                name: orders-rabbitmq
            - secretRef:
                name: orders-db
            - configMapRef:
                name: orders
          securityContext:
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
          image: "public.ecr.aws/aws-containers/retail-store-sample-orders:1.2.2"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8081
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: 8081
            initialDelaySeconds: 10
          resources:
            limits:
              memory: 512Mi
            requests:
              cpu: 256m
              memory: 512Mi
          volumeMounts:
            - mountPath: /tmp
              name: tmp-volume
      volumes:
        - name: tmp-volume
          emptyDir:
            medium: Memory
---
# Source: retail-store-sample-orders-chart/templates/postgresql-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: orders-postgresql
  labels:
    helm.sh/chart: orders-1.2.2
    app.kubernetes.io/name: orders
    app.kubernetes.io/instance: orders
    app.kubernetes.io/component: postgresql
    app.kubernetes.io/owner: retail-store-sample
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  serviceName: orders-postgresql
  selector:
    matchLabels:
      app.kubernetes.io/name: orders
      app.kubernetes.io/instance: orders
      app.kubernetes.io/component: postgresql
      app.kubernetes.io/owner: retail-store-sample
  template:
    metadata:
      labels:
        app.kubernetes.io/name: orders
        app.kubernetes.io/instance: orders
        app.kubernetes.io/component: postgresql
        app.kubernetes.io/owner: retail-store-sample
    spec:
      containers:
        - name: postgresql
          image: "public.ecr.aws/docker/library/postgres:16.1"
          imagePullPolicy: IfNotPresent
          env:
            - name: POSTGRES_DB
              value: orders
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: orders-db
                  key: RETAIL_ORDERS_PERSISTENCE_USERNAME
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: orders-db
                  key: RETAIL_ORDERS_PERSISTENCE_PASSWORD
            - name: PGDATA
              value: /data/pgdata
          volumeMounts:
            - name: data
              mountPath: /data
          ports:
            - name: postgresql
              containerPort: 5432
              protocol: TCP
      volumes:
      - name: data
        emptyDir: {}
---
# Source: retail-store-sample-orders-chart/templates/rabbitmq-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: orders-rabbitmq
  labels:
    helm.sh/chart: orders-1.2.2
    app.kubernetes.io/name: orders
    app.kubernetes.io/instance: orders
    app.kubernetes.io/component: rabbitmq
    app.kubernetes.io/owner: retail-store-sample
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  serviceName: orders-rabbitmq
  selector:
    matchLabels:
      app.kubernetes.io/name: orders
      app.kubernetes.io/instance: orders
      app.kubernetes.io/component: rabbitmq
      app.kubernetes.io/owner: retail-store-sample
  template:
    metadata:
      labels:
        app.kubernetes.io/name: orders
        app.kubernetes.io/instance: orders
        app.kubernetes.io/component: rabbitmq
        app.kubernetes.io/owner: retail-store-sample
    spec:
      containers:
        - name: rabbitmq
          image: "public.ecr.aws/docker/library/rabbitmq:3-management"
          imagePullPolicy: IfNotPresent
          ports:
          - name: amqp
            containerPort: 5672
            protocol: TCP
          - name: http
            containerPort: 15672
            protocol: TCP
          volumeMounts:
          - name: data
            mountPath: "/var/lib/rabbitmq/mnesia"
      volumes:
      - name: data
        emptyDir: {}

---
# Source: retail-store-sample-checkout-chart/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: checkout
  labels:
    helm.sh/chart: checkout-1.2.2
    app.kubernetes.io/name: checkout
    app.kubernetes.io/instance: checkout
    app.kubernetes.io/component: service
    app.kubernetes.io/owner: retail-store-sample
    app.kubernetes.io/managed-by: Helm
---
# Source: retail-store-sample-checkout-chart/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: checkout
data:
  RETAIL_CHECKOUT_PERSISTENCE_PROVIDER: redis
  RETAIL_CHECKOUT_PERSISTENCE_REDIS_URL: redis://checkout-redis:6379
  RETAIL_CHECKOUT_ENDPOINTS_ORDERS: http://orders:80
---
# Source: retail-store-sample-checkout-chart/templates/redis-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: checkout-redis
  labels:
    helm.sh/chart: checkout-1.2.2
    app.kubernetes.io/name: checkout
    app.kubernetes.io/instance: checkout
    app.kubernetes.io/component: redis
    app.kubernetes.io/owner: retail-store-sample
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 6379
      targetPort: redis
      protocol: TCP
      name: redis
  selector:
    app.kubernetes.io/name: checkout
    app.kubernetes.io/instance: checkout
    app.kubernetes.io/component: redis
    app.kubernetes.io/owner: retail-store-sample
---
# Source: retail-store-sample-checkout-chart/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: checkout
  labels:
    helm.sh/chart: checkout-1.2.2
    app.kubernetes.io/name: checkout
    app.kubernetes.io/instance: checkout
    app.kubernetes.io/component: service
    app.kubernetes.io/owner: retail-store-sample
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: checkout
    app.kubernetes.io/instance: checkout
    app.kubernetes.io/component: service
    app.kubernetes.io/owner: retail-store-sample
---
# Source: retail-store-sample-checkout-chart/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: checkout
  labels:
    helm.sh/chart: checkout-1.2.2
    app.kubernetes.io/name: checkout
    app.kubernetes.io/instance: checkout
    app.kubernetes.io/component: service
    app.kubernetes.io/owner: retail-store-sample
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: checkout
      app.kubernetes.io/instance: checkout
      app.kubernetes.io/component: service
      app.kubernetes.io/owner: retail-store-sample
  template:
    metadata:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "8081"
        prometheus.io/scrape: "true"
      labels:
        app.kubernetes.io/name: checkout
        app.kubernetes.io/instance: checkout
        app.kubernetes.io/component: service
        app.kubernetes.io/owner: retail-store-sample
    spec:
      serviceAccountName: checkout
      securityContext:
        fsGroup: 1000
      containers:
        - name: checkout
          envFrom:
            - configMapRef:
                name: checkout
          securityContext:
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
          image: "public.ecr.aws/aws-containers/retail-store-sample-checkout:1.2.2"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8081
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /health
              port: 8081
          resources:
            limits:
              memory: 256Mi
            requests:
              cpu: 128m
              memory: 256Mi
          volumeMounts:
            - mountPath: /tmp
              name: tmp-volume
      volumes:
        - name: tmp-volume
          emptyDir:
            medium: Memory
---
# Source: retail-store-sample-checkout-chart/templates/redis-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: checkout-redis
  labels:
    helm.sh/chart: checkout-1.2.2
    app.kubernetes.io/name: checkout
    app.kubernetes.io/instance: checkout
    app.kubernetes.io/component: redis
    app.kubernetes.io/owner: retail-store-sample
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: checkout
      app.kubernetes.io/instance: checkout
      app.kubernetes.io/component: redis
      app.kubernetes.io/owner: retail-store-sample
  template:
    metadata:
      labels:
        app.kubernetes.io/name: checkout
        app.kubernetes.io/instance: checkout
        app.kubernetes.io/component: redis
        app.kubernetes.io/owner: retail-store-sample
    spec:
      containers:
        - name: redis
          image: "redis:6.0-alpine"
          imagePullPolicy: IfNotPresent
          ports:
            - name: redis
              containerPort: 6379
              protocol: TCP

---
# Source: retail-store-sample-ui-chart/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ui
  labels:
    helm.sh/chart: ui-1.2.2
    app.kubernetes.io/name: ui
    app.kubernetes.io/instance: ui
    app.kubernetes.io/component: service
    app.kubernetes.io/owner: retail-store-sample
    app.kubernetes.io/managed-by: Helm
---
# Source: retail-store-sample-ui-chart/templates/configmap.yml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ui
data:
  RETAIL_UI_ENDPOINTS_CATALOG: http://catalog
  RETAIL_UI_ENDPOINTS_CARTS: http://carts
  RETAIL_UI_ENDPOINTS_CHECKOUT: http://checkout
  RETAIL_UI_ENDPOINTS_ORDERS: http://orders
---
# Source: retail-store-sample-ui-chart/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: ui
  labels:
    helm.sh/chart: ui-1.2.2
    app.kubernetes.io/name: ui
    app.kubernetes.io/instance: ui
    app.kubernetes.io/component: service
    app.kubernetes.io/owner: retail-store-sample
    app.kubernetes.io/managed-by: Helm
spec:
  type: LoadBalancer
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: ui
    app.kubernetes.io/instance: ui
    app.kubernetes.io/component: service
    app.kubernetes.io/owner: retail-store-sample
---
# Source: retail-store-sample-ui-chart/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ui
  labels:
    helm.sh/chart: ui-1.2.2
    app.kubernetes.io/name: ui
    app.kubernetes.io/instance: ui
    app.kubernetes.io/component: service
    app.kubernetes.io/owner: retail-store-sample
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: ui
      app.kubernetes.io/instance: ui
      app.kubernetes.io/component: service
      app.kubernetes.io/owner: retail-store-sample
  template:
    metadata:
      annotations:
        prometheus.io/path: /actuator/prometheus
        prometheus.io/port: "8081"
        prometheus.io/scrape: "true"
      labels:
        app.kubernetes.io/name: ui
        app.kubernetes.io/instance: ui
        app.kubernetes.io/component: service
        app.kubernetes.io/owner: retail-store-sample
    spec:
      serviceAccountName: ui
      securityContext:
        fsGroup: 1000
      containers:
        - name: ui
          env:
            - name: JAVA_OPTS
              value: -XX:MaxRAMPercentage=75.0 -Djava.security.egd=file:/dev/urandom
            - name: METADATA_KUBERNETES_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: METADATA_KUBERNETES_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: METADATA_KUBERNETES_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          envFrom:
            - configMapRef:
                name: ui
          securityContext:
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
          image: "public.ecr.aws/aws-containers/retail-store-sample-ui:1.2.2"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8081
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: 8081
            initialDelaySeconds: 10
          resources:
            limits:
              memory: 512Mi
            requests:
              cpu: 128m
              memory: 512Mi
          volumeMounts:
            - mountPath: /tmp
              name: tmp-volume
      volumes:
        - name: tmp-volume
          emptyDir:
            medium: Memory

